#!/usr/bin/env python3
"""
DUI Multi-Agent Interface
Simple interface for the multi-agent SQL generation system.
"""

import json
import sys
from dui_multi_agent_system import get_multi_agent_system

def print_banner():
    """Print the system banner."""
    print("üöÄ DUI Multi-Agent SQL System")
    print("=" * 50)
    print("Multi-agent system with optimized context usage")
    print("Context reduction: 100KB+ ‚Üí ~25KB (~75% reduction)")
    print("=" * 50)

def print_system_status(system):
    """Print system status."""
    status = system.get_system_status()
    print(f"\nüìä System Status: {status['system_status']}")
    print(f"üîß Agents Loaded: {status['agents_loaded']}")
    print(f"üìÅ Total Views: {status['data_manager']['total_views']}")
    print(f"üíæ Cache Hit Ratio: {status['data_manager']['cache_hit_ratio']}")
    print(f"üìâ Context Reduction: {status['context_optimization']['reduction_percentage']}")

def print_result(result):
    """Print query result in a formatted way."""
    print(f"\n{'='*60}")
    print(f"üìã QUERY RESULT")
    print(f"{'='*60}")
    
    # Basic info
    print(f"‚úÖ Success: {result.get('success', False)}")
    print(f"üîç Query: {result.get('user_query', 'N/A')}")
    print(f"‚úÖ Valid: {result.get('is_valid', False)}")
    
    # Context usage
    context_usage = result.get('context_usage', {})
    print(f"\nüìä Context Usage:")
    print(f"  ‚Ä¢ Query Analyzer: {context_usage.get('query_analyzer', 'N/A')}")
    print(f"  ‚Ä¢ View Selector: {context_usage.get('view_selector', 'N/A')}")
    print(f"  ‚Ä¢ SQL Generator: {context_usage.get('sql_generator', 'N/A')}")
    print(f"  ‚Ä¢ Validator: {context_usage.get('validator', 'N/A')}")
    print(f"  ‚Ä¢ Total: {context_usage.get('total_estimated', 'N/A')}")
    print(f"  ‚Ä¢ Views Used: {context_usage.get('views_used', 0)}")
    
    # Query analysis
    analysis = result.get('query_analysis', {})
    if analysis:
        print(f"\nüîç Query Analysis:")
        print(f"  ‚Ä¢ Intent: {analysis.get('intent', 'N/A')}")
        print(f"  ‚Ä¢ Type: {analysis.get('query_type', 'N/A')}")
        print(f"  ‚Ä¢ Complexity: {analysis.get('complexity', 'N/A')}")
        print(f"  ‚Ä¢ Keywords: {', '.join(analysis.get('keywords', []))}")
    
    # View selection
    view_selection = result.get('view_selection', {})
    if view_selection:
        print(f"\nüéØ View Selection:")
        print(f"  ‚Ä¢ Selected Views: {', '.join(view_selection.get('selected_views', []))}")
        print(f"  ‚Ä¢ Reasoning: {view_selection.get('reasoning', 'N/A')}")
    
    # SQL generation
    sql_gen = result.get('sql_generation', {})
    if sql_gen:
        print(f"\n‚öôÔ∏è SQL Generation:")
        print(f"  ‚Ä¢ Success: {sql_gen.get('success', False)}")
        print(f"  ‚Ä¢ Model: {sql_gen.get('model_used', 'N/A')}")
        print(f"  ‚Ä¢ Explanation: {sql_gen.get('explanation', 'N/A')}")
    
    # Validation
    validation = result.get('validation', {})
    if validation:
        print(f"\n‚úÖ Validation:")
        print(f"  ‚Ä¢ Valid: {validation.get('is_valid', False)}")
        print(f"  ‚Ä¢ Errors: {len(validation.get('errors', []))}")
        print(f"  ‚Ä¢ Warnings: {len(validation.get('warnings', []))}")
        print(f"  ‚Ä¢ Summary: {validation.get('summary', 'N/A')}")
    
    # Final SQL
    final_sql = result.get('final_sql', '')
    if final_sql:
        print(f"\nüîß Generated SQL:")
        print(f"{'‚îÄ'*60}")
        print(final_sql)
        print(f"{'‚îÄ'*60}")
    
    # Recommendations
    recommendations = result.get('recommendations', [])
    if recommendations:
        print(f"\nüí° Recommendations:")
        for rec in recommendations:
            print(f"  ‚Ä¢ {rec}")
    
    # Execution results
    execution = result.get('execution', {})
    if execution:
        print(f"\nüöÄ Execution Results:")
        print(f"  ‚Ä¢ Executed: {execution.get('executed', False)}")
        if execution.get('executed', False):
            print(f"  ‚Ä¢ Rows Returned: {execution.get('rows_returned', 0)}")
            print(f"  ‚Ä¢ Columns: {', '.join(execution.get('columns', []))}")
            if execution.get('truncated', False):
                print(f"  ‚Ä¢ ‚ö†Ô∏è Results truncated (showing first 100 rows)")
        else:
            print(f"  ‚Ä¢ Reason: {execution.get('reason', 'N/A')}")

def interactive_mode():
    """Run in interactive mode."""
    print_banner()
    
    # Initialize system
    try:
        system = get_multi_agent_system()
        print_system_status(system)
    except Exception as e:
        print(f"‚ùå Failed to initialize system: {e}")
        return
    
    print(f"\nüí¨ Interactive Mode - Type 'quit' to exit")
    print(f"üí° Example queries:")
    print(f"  ‚Ä¢ Show me recent DUI cases from the last 30 days")
    print(f"  ‚Ä¢ Count how many defendants had BAC above 0.08")
    print(f"  ‚Ä¢ List officers with the most DUI arrests")
    print(f"  ‚Ä¢ Find cases with field sobriety test failures")
    
    while True:
        try:
            print(f"\n{'‚îÄ'*60}")
            query = input("üîç Enter your query: ").strip()
            
            if query.lower() in ['quit', 'exit', 'q']:
                print("üëã Goodbye!")
                break
            
            if not query:
                continue
            
            print(f"üîÑ Processing query...")
            result = system.process_query(query)
            print_result(result)
            
        except KeyboardInterrupt:
            print(f"\nüëã Goodbye!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")

def batch_mode(queries):
    """Run in batch mode with predefined queries."""
    print_banner()
    
    # Initialize system
    try:
        system = get_multi_agent_system()
        print_system_status(system)
    except Exception as e:
        print(f"‚ùå Failed to initialize system: {e}")
        return
    
    print(f"\nüß™ Batch Mode - Testing {len(queries)} queries")
    
    results = []
    for i, query in enumerate(queries, 1):
        print(f"\n{'‚îÄ'*60}")
        print(f"üîç Query {i}/{len(queries)}: {query}")
        print(f"üîÑ Processing...")
        
        result = system.process_query(query)
        results.append(result)
        
        # Print summary
        success = result.get('success', False)
        context_usage = result.get('context_usage', {})
        views_used = context_usage.get('views_used', 0)
        
        print(f"‚úÖ Success: {success}")
        print(f"üìä Context: {context_usage.get('total_estimated', 'N/A')}")
        print(f"üîç Views: {views_used}")
    
    # Print summary
    print(f"\n{'='*60}")
    print(f"üìä BATCH SUMMARY")
    print(f"{'='*60}")
    
    successful = sum(1 for r in results if r.get('success', False))
    total_context = sum(
        int(r.get('context_usage', {}).get('total_estimated', '0KB').replace('~', '').replace('KB', ''))
        for r in results
    )
    total_views = sum(
        r.get('context_usage', {}).get('views_used', 0)
        for r in results
    )
    
    print(f"‚úÖ Successful Queries: {successful}/{len(queries)}")
    print(f"üìä Total Context Used: ~{total_context}KB")
    print(f"üîç Total Views Used: {total_views}")
    print(f"üìâ Average Context per Query: ~{total_context//len(queries)}KB")

def main():
    """Main function."""
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            # Test with sample queries
            test_queries = [
                "Show me recent DUI cases from the last 30 days",
                "Count how many defendants had BAC above 0.08",
                "List officers with the most DUI arrests",
                "Find cases with field sobriety test failures"
            ]
            batch_mode(test_queries)
        elif command == "status":
            # Show system status only
            print_banner()
            system = get_multi_agent_system()
            print_system_status(system)
        else:
            print(f"‚ùå Unknown command: {command}")
            print(f"Usage: python dui_interface_multi_agent.py [test|status]")
    else:
        # Interactive mode
        interactive_mode()

if __name__ == "__main__":
    main()
